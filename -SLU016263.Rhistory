shiny::runApp()
runApp()
install.packages(bs4Dash)
install.packages("bs4Dash")
install.packages("shinycssloaders")
install.packages("rintrojs")
runApp()
runApp()
shiny::runApp()
runApp()
library(shiny)
library(DT)
library(raster)
library(rintrojs)
library(htmltools)
library(tidyverse)
library(RColorBrewer)
library(dplyr)
library(leaflet)
library(shiny)
library(DT)
library(bs4Dash)
library(fresh)
library(raster)
library(leaflet)
library(shinycssloaders)
library(rintrojs)
View(metadata)
runApp()
runApp()
runApp()
View(metadata)
runApp()
runApp()
View(metadata)
View(metadata)
View(metadata)
getwd()
list.files("raster")
View(metadata)
runApp()
View(metadata)
View(metadata)
getwd()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(metadata)
runApp()
runApp()
View(metadata)
runApp()
runApp()
runApp()
drifting_longline = c(1.8, 3.3, 0, 4.1)
sensitivity = data.frame(
sperm_whales = c(4, 2.2, 3.8, 2.6),
whalesharks = c(1.3, 3.8, 4.2, 1.1),
penguins = c(1.8, 3.3, 0, 4.1),
sharks = c(4, 2.2, 3.8, 2.6),
trawling = c(1.3, 3.8, 4.2, 1.1),
drifting_longline = c(1.8, 3.3, 0, 4.1),
tuna = c(0, 0, 0, 0)
)
View(sensitivity)
runApp()
runApp()
runApp()
runApp()
gc()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(raster)
library(mapview)
library(RColorBrewer)
library(climateStability)
stand_fun <- function(x){
mx <- cellStats(x, stat = 'max', na.rm = T)
mn <- cellStats(x, stat = 'min', na.rm = T)
r <- mx-mn
s <- x[is.na(x) == FALSE] - mn
v <- s/r
return(v)
}
l <- list.files("./raster_raw/", full.names = T)
l
temp <- raster(l[9])
plot(temp)
temp <- rescale0to1(temp)
plot(temp)
temp <- temp*100
plot(temp)
p <- paste0("./raster/",l[9])
l.short <- list.files("./raster_raw/", full.names = F)
l
p <- paste0("./raster/",l.short[9])
writeRaster(temp, filename = p, datatype = 'INT1S')
test <- raster(p)
mapview(test, col.regions = brewer.pal(11, "Spectral"))
writeRaster(temp, filename = p, datatype = 'INT1S', COMPRESS=LZW, overwrite = T)
writeRaster(temp, filename = p, datatype = 'INT2S', COMPRESS=LZW, overwrite = T)
writeRaster(temp, filename = p, datatype = 'INT2U', COMPRESS=LZW, overwrite = T)
p <- paste0("./raster/",l.short[9])
writeRaster(temp, filename = p, datatype = 'INT1U', COMPRESS=LZW, overwrite = T)
test <- raster(p)
mapview(test, col.regions = brewer.pal(11, "Spectral"))
temp <- aggregate(temp, fact = 10)
plot(temp)
writeRaster(temp, filename = p, datatype = 'INT2U', COMPRESS=LZW, overwrite = T)
temp <- raster(l[9])
temp <- aggregate(temp, fact = 5)
temp <- rescale0to1(temp)
temp <- temp*100
plot(temp)
p <- paste0("./raster/",l.short[9])
writeRaster(temp, filename = p, datatype = 'INT2U', COMPRESS=LZW, overwrite = T)
for(i in 1:length(l)){
temp <- raster(l[i])
temp <- aggregate(temp, fact = 5)
temp <- rescale0to1(temp)
temp <- temp*100
p <- paste0("./raster/",l.short[i])
writeRaster(temp, filename = p, datatype = 'INT2U', COMPRESS=LZW, overwrite = T)
}
library(png)
writePNG(temp, target=paste0("./png/",l.short[i]))
png(paste0("./png/",l.short[i]), width=600, height=500, res=120)
print(plot(temp))
dev.off()
png(paste0("./png/",l.short[i]), width=600, height=500, res=120)
print(mapview(temp, col.regions = brewer.pal(11, "Spectral")))
dev.off()
m <- mapview(temp, col.regions = brewer.pal(11, "Spectral"))
mapshot(m, file = paste0("./png/",l.short[i], ".png"))
webshot::install_phantomjs()
m <- mapview(temp, col.regions = brewer.pal(11, "Spectral"))
mapshot(m, file = paste0("./png/",l.short[i], ".png"))
m <- mapview(temp, col.regions = brewer.pal(11, "Spectral"))
mapshot(m, file = paste0("./png/",l.short[i], ".png"), remove_controls = c("zoomControl", "layersControl", "homeButton", "scaleBar",
"drawToolbar", "easyButton"))
for(i in 1:length(l)){
temp <- raster(l[i])
temp <- aggregate(temp, fact = 5)
temp <- rescale0to1(temp)
temp <- temp*100
p <- paste0("./raster/",l.short[i])
#writeRaster(temp, filename = p, datatype = 'INT2U', COMPRESS=LZW, overwrite = T)
m <- mapview(temp, col.regions = brewer.pal(11, "Spectral"))
mapshot(m, file = paste0("./png/",l.short[i], ".png"), remove_controls = c("zoomControl", "layersControl", "homeButton", "scaleBar",
"drawToolbar", "easyButton"))
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='edsacre',
token='DDF6D675DC432AAC749BE587EECA3995',
secret='crX0DLVM4fy8huAqEDonVuMcyi3VlfnyhUUmC7zo')
runApp()
r <- raster("./raster/dolphin.tif")
library(raster)
library(mapview)
library(RColorBrewer)
library(climateStability)
library(png)
r <- raster("./raster/dolphin.tif")
r <- raster("./raster/dolphin.tif")
mapview(r, col.regions = brewer.pal(11, "Spectral"), direction = -1)
shiny::runApp()
runApp()
gc()
shiny::runApp()
gc()
shiny::runApp()
runApp()
View(metadata)
runApp()
runApp()
runApp()
shiny::runApp()
gc()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
gc()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.POSIXct(format(Sys.time()),tz="CET")
Sys.setenv(TZ="Europe/Paris")
as.POSIXct(format(Sys.time()),tz="CET")
Sys.time()
runApp()
runApp()
runApp()
Sys.timezone()
Sys.time()
Sys.setenv(TZ='CET')
Sys.time()
runApp()
as.POSIXct(Sys.time(), )
.POSIXct(Sys.time(), "GMT")
as.POSIXct(Sys.time(), "GMT")
as.POSIXct(Sys.time(), "CET")
runApp()
as.POSIXct(format(Sys.time()),tz="GMT")
runApp()
